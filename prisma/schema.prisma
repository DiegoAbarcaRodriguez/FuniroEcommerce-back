generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["typedSql"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model furniture {
  id                      String               @id @db.Uuid
  user_fk                 String?              @db.Uuid
  name                    String               @unique @db.VarChar(30)
  description             String               @db.VarChar
  discount                Float?
  is_new                  Boolean?             @default(false)
  category                String?              @db.VarChar(30)
  price                   Float?               @default(0)
  stock                   Int?                 @default(0)
  sales_package           String               @db.VarChar(30)
  model_number            String               @unique @db.VarChar(30)
  secondary_material      String?              @db.VarChar(30)
  upholstery_material     String?              @db.VarChar(30)
  upholstery_color        String?              @db.VarChar(30)
  height                  Float
  width                   Float
  depth                   Float?
  weight                  Float
  warranty_domestic       Int
  warranty_general        Int
  filling_material        String?              @db.VarChar(30)
  has_adjustable_headrest Boolean?
  max_load                Float
  origin                  String               @db.VarChar(30)
  modify_at               DateTime?            @default(dbgenerated("'2025-02-17 02:48:11.843308'::timestamp without time zone")) @db.Timestamp(6)
  images                  String[]             @unique(map: "furniture_image_key") @db.VarChar(72)
  customer_furniture      customer_furniture[]
  user                    user?                @relation(fields: [user_fk], references: [id], onDelete: NoAction, onUpdate: NoAction)
  order_furniture         order_furniture[]
  review                  review[]
}

model order {
  id              String            @id @db.Uuid
  total           Float
  status          order_status?
  customer_fk     String?           @db.Uuid
  user_fk         String?           @db.Uuid
  created_at      DateTime?         @default(dbgenerated("'2025-02-17 02:48:11.916564'::timestamp without time zone")) @db.Timestamp(6)
  customer        customer?         @relation(fields: [customer_fk], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user            user?             @relation(fields: [user_fk], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "order_user_fk_fkey1")
  order_furniture order_furniture[]
}

model order_furniture {
  id           Int        @id @default(autoincrement())
  order_fk     String?    @db.Uuid
  furniture_fk String?    @db.Uuid
  quantity     Int        @default(0)
  furniture    furniture? @relation(fields: [furniture_fk], references: [id], onDelete: NoAction, onUpdate: NoAction)
  order        order?     @relation(fields: [order_fk], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id         String      @id @db.Uuid
  username   String      @unique @db.VarChar(30)
  password   String      @db.VarChar(72)
  is_admin   Boolean?    @default(false)
  modify_at  DateTime?   @default(dbgenerated("'2025-02-17 02:48:11.947522'::timestamp without time zone")) @db.Timestamp(6)
  modify_by  String?     @db.Uuid
  is_root    Boolean?    @default(false)
  furniture  furniture[]
  order      order[]
  user       user?       @relation("userTouser", fields: [modify_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  other_user user[]      @relation("userTouser")
}

model customer {
  id                     String               @id @db.Uuid
  first_name             String               @db.VarChar(30)
  last_name              String               @db.VarChar(50)
  company_name           String?              @db.VarChar(30)
  email                  String               @db.VarChar(40)
  phone                  BigInt
  zip_code               Int
  country                String?              @db.VarChar(30)
  city                   String?              @db.VarChar(30)
  province               String?              @db.VarChar(30)
  street                 String?              @db.VarChar(30)
  additional_information String?
  password               String               @db.VarChar(72)
  token                  String?              @db.VarChar
  customer_furniture     customer_furniture[]
  order                  order[]
  review                 review[]
}

model review {
  id           String     @id @db.Uuid
  grade        Float      @default(0)
  customer_fk  String?    @db.Uuid
  furniture_fk String?    @db.Uuid
  comment      String
  title        String?
  created_at   DateTime?  @db.Timestamp(6)
  customer     customer?  @relation(fields: [customer_fk], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_review_customer")
  furniture    furniture? @relation(fields: [furniture_fk], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model customer_furniture {
  id           Int        @id @default(autoincrement())
  customer_fk  String?    @db.Uuid
  furniture_fk String?    @db.Uuid
  customer     customer?  @relation(fields: [customer_fk], references: [id], onDelete: NoAction, onUpdate: NoAction)
  furniture    furniture? @relation(fields: [furniture_fk], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

enum order_status {
  on_way
  confirm
  rejected
  complete
}
