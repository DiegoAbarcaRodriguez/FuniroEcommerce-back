generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model detail_description {
  id                      Int         @id @default(autoincrement())
  filling_material        String?     @db.VarChar(30)
  has_adjustable_headrest Boolean?
  max_load                Float
  origin                  String      @db.VarChar(30)
  furniture               furniture[]
}

model dimension {
  id        Int         @id @default(autoincrement())
  height    Float
  width     Float
  depth     Float?
  weight    Float
  furniture furniture[]
}

model furniture {
  id                     Int                  @id @default(autoincrement())
  name                   String               @unique @db.VarChar(30)
  description            String               @db.VarChar(30)
  main_description       String
  short_description      String
  discount               Float?
  is_new                 Boolean?             @default(false)
  category               String?              @db.VarChar(30)
  price                  Float?               @default(0)
  stock                  Int?                 @default(0)
  general_description_fk Int?
  dimension_fk           Int?
  warranty_fk            Int?
  detail_description_fk  Int?
  user_fk                Int?
  created_at             DateTime?            @default(dbgenerated("'2024-11-20 06:59:38.135792'::timestamp without time zone")) @db.Timestamp(6)
  detail_description     detail_description?  @relation(fields: [detail_description_fk], references: [id], onDelete: NoAction, onUpdate: NoAction)
  dimension              dimension?           @relation(fields: [dimension_fk], references: [id], onDelete: NoAction, onUpdate: NoAction)
  general_description    general_description? @relation(fields: [general_description_fk], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user                   user?                @relation(fields: [user_fk], references: [id], onDelete: NoAction, onUpdate: NoAction)
  warranty               warranty?            @relation(fields: [warranty_fk], references: [id], onDelete: NoAction, onUpdate: NoAction)
  order_furniture        order_furniture[]
}

model general_description {
  id                  Int         @id @default(autoincrement())
  sales_package       String      @db.VarChar(30)
  model_number        String      @unique @db.VarChar(30)
  secondary_material  String?     @db.VarChar(30)
  upholstery_material String?     @db.VarChar(30)
  upholstery_color    String?     @db.VarChar(30)
  furniture           furniture[]
}

model order {
  id              Int               @id @default(autoincrement())
  total           Float
  status          order_status?
  customer_fk     Int?
  user_fk         Int?
  user            user?             @relation(fields: [user_fk], references: [id], onDelete: NoAction, onUpdate: NoAction)
  order_furniture order_furniture[]
}

model order_furniture {
  id           Int        @id @default(autoincrement())
  order_fk     Int?
  furniture_fk Int?
  furniture    furniture? @relation(fields: [furniture_fk], references: [id], onDelete: NoAction, onUpdate: NoAction)
  order        order?     @relation(fields: [order_fk], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id         Int         @id @default(autoincrement())
  username   String      @unique @db.VarChar(30)
  password   String      @db.VarChar(60)
  modify_at  DateTime?   @default(dbgenerated("'2024-11-20 06:59:38.421205'::timestamp without time zone")) @db.Timestamp(6)
  modify_by  Int?
  is_admin   Boolean?    @default(false)
  furniture  furniture[]
  order      order[]
  user       user?       @relation("userTouser", fields: [modify_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  other_user user[]      @relation("userTouser")
}

model warranty {
  id        Int         @id @default(autoincrement())
  domestic  Int
  general   Int
  furniture furniture[]
}

enum order_status {
  on_way
  confirm
  rejected
  complete
}
