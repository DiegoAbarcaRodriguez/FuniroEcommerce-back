generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["typedSql"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model furniture {
  id                      Int               @id @default(autoincrement())
  user_fk                 String?           @db.Uuid
  name                    String            @unique @db.VarChar(30)
  description             String            @db.VarChar(30)
  main_description        String
  short_description       String
  discount                Float?
  is_new                  Boolean?          @default(false)
  category                String?           @db.VarChar(30)
  price                   Float?            @default(0)
  stock                   Int?              @default(0)
  sales_package           String            @db.VarChar(30)
  model_number            String            @unique @db.VarChar(30)
  secondary_material      String?           @db.VarChar(30)
  upholstery_material     String?           @db.VarChar(30)
  upholstery_color        String?           @db.VarChar(30)
  height                  Float
  width                   Float
  depth                   Float?
  weight                  Float
  warranty_domestic       Int
  warranty_general        Int
  filling_material        String?           @db.VarChar(30)
  has_adjustable_headrest Boolean?
  max_load                Float
  origin                  String            @db.VarChar(30)
  created_at              DateTime?         @default(now()) @db.Timestamp(6)
  image                   String            @unique @db.VarChar
  user                    user?             @relation(fields: [user_fk], references: [id], onDelete: NoAction, onUpdate: NoAction)
  order_furniture         order_furniture[]
}

model order {
  id              Int               @id @default(autoincrement())
  total           Float
  status          order_status?
  customer_fk     Int?
  user_fk         String?           @db.Uuid
  created_at      DateTime          @default(now()) @db.Timestamp(6)
  customer        customer?         @relation(fields: [customer_fk], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user            user?             @relation(fields: [user_fk], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "order_user_fk_fkey1")
  order_furniture order_furniture[]
}

model order_furniture {
  id           Int        @id @default(autoincrement())
  order_fk     Int?
  furniture_fk Int?
  quantity     Int        @default(0)
  furniture    furniture? @relation(fields: [furniture_fk], references: [id], onDelete: NoAction, onUpdate: NoAction)
  order        order?     @relation(fields: [order_fk], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id         String      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  username   String      @unique @db.VarChar(30)
  password   String      @db.VarChar(72)
  is_admin   Boolean?    @default(false)
  modify_at  DateTime?   @default(now()) @db.Timestamp(6)
  modify_by  String?     @db.Uuid
  is_root    Boolean     @default(false)
  furniture  furniture[]
  order      order[]
  user       user?       @relation("userTouser", fields: [modify_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  other_user user[]      @relation("userTouser")
}

model customer {
  id                     Int     @id @default(autoincrement())
  first_name             String  @db.VarChar(30)
  last_name              String  @db.VarChar(50)
  company_name           String? @db.VarChar(30)
  email                  String  @unique(map: "unique_email") @db.VarChar(40)
  phone                  BigInt
  zip_code               Int
  country                String? @db.VarChar(30)
  city                   String? @db.VarChar(30)
  province               String? @db.VarChar(30)
  street                 String? @db.VarChar(30)
  additional_information String?
  order                  order[]
}

enum order_status {
  on_way
  confirm
  rejected
  complete
}
